// @flow

/**
 * A React component with simplified usage
 */
declare export class Component<Props = {}, State = void> extends React$Component<Props, State> {
  // Returns the last instance;
  static instance(): ?this;

  static instances(): this[];

  // Replacement-hook for componentDidMount
  mounted(): mixed;

  // Replacement-hook for componentDidUpdate
  updated(prevProps: Props, prevState: State, prevContext: any): mixed;

  // Replacement-hook for componentWillUnmount
  beforeUnmount(): mixed;
}

/**
 * Create an object that when altered, schedules rerender of affected React Simplified components.
 */
declare export function sharedComponentData<Observable: {}>(object?: Observable): Observable;

/**
 * In case one needs the observe and unobserve functions from @nx-js/observer-util
 */
declare type Scheduler = {
  add: () => mixed,
  delete: () => mixed
};
declare type ObserveOptions = {
  scheduler?: Scheduler | (() => mixed),
  debugger?: () => mixed,
  lazy?: boolean
};
declare export function observe<Reaction: () => mixed>(func: Reaction, options?: ObserveOptions): Reaction;
declare export function unobserve(func: () => mixed): void;
